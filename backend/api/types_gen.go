// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Event defines model for Event.
type Event struct {
	Admins       []string           `json:"admins"`
	Attendees    []string           `json:"attendees"`
	CreatedAt    time.Time          `json:"created_at"`
	Date         openapi_types.Date `json:"date"`
	Description  string             `json:"description"`
	EventId      openapi_types.UUID `json:"event_id"`
	IsDeleted    bool               `json:"is_deleted"`
	IsMeAttendee bool               `json:"is_me_attendee"`
	IsOpen       bool               `json:"is_open"`
	Title        string             `json:"title"`
	UpdatedAt    time.Time          `json:"updated_at"`
}

// EventBase defines model for EventBase.
type EventBase struct {
	Admins       []string           `json:"admins"`
	Attendees    []string           `json:"attendees"`
	Date         openapi_types.Date `json:"date"`
	Description  string             `json:"description"`
	IsMeAttendee bool               `json:"is_me_attendee"`
	IsOpen       bool               `json:"is_open"`
	Title        string             `json:"title"`
}

// EventOnUpdate defines model for EventOnUpdate.
type EventOnUpdate struct {
	Admins      []string           `json:"admins"`
	Attendees   []string           `json:"attendees"`
	Date        openapi_types.Date `json:"date"`
	Description string             `json:"description"`
	IsOpen      bool               `json:"is_open"`
	Title       string             `json:"title"`
}

// EventSummary defines model for EventSummary.
type EventSummary struct {
	Admins       []string           `json:"admins"`
	Date         openapi_types.Date `json:"date"`
	Description  string             `json:"description"`
	EventId      openapi_types.UUID `json:"event_id"`
	IsMeAttendee bool               `json:"is_me_attendee"`
	IsOpen       bool               `json:"is_open"`
	Title        string             `json:"title"`
}

// Lottery defines model for Lottery.
type Lottery struct {
	CreatedAt time.Time          `json:"created_at"`
	EventId   openapi_types.UUID `json:"event_id"`
	IsDeleted bool               `json:"is_deleted"`
	LotteryId openapi_types.UUID `json:"lottery_id"`
	Title     string             `json:"title"`
	UpdatedAt time.Time          `json:"updated_at"`
	Winners   []string           `json:"winners"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// IfDeleted このパラメータが true の場合、削除済みのイベントも含めて取得します
	IfDeleted bool `form:"ifDeleted" json:"ifDeleted"`
}

// GetLotteriesParams defines parameters for GetLotteries.
type GetLotteriesParams struct {
	// IfDeleted このパラメータが true の場合、削除済みの抽選も含めて取得します
	IfDeleted bool `form:"ifDeleted" json:"ifDeleted"`
}

// PostLotteryJSONBody defines parameters for PostLottery.
type PostLotteryJSONBody struct {
	Title string `json:"title"`
}

// RollLotteryParams defines parameters for RollLottery.
type RollLotteryParams struct {
	// IfDuplicated このパラメータが true の場合、同一イベント内での重複当選を許可します (false の場合も同一抽選内では重複当選は許可されません)
	IfDuplicated bool `form:"ifDuplicated" json:"ifDuplicated"`
}

// PostEventJSONRequestBody defines body for PostEvent for application/json ContentType.
type PostEventJSONRequestBody = EventBase

// PatchEventJSONRequestBody defines body for PatchEvent for application/json ContentType.
type PatchEventJSONRequestBody = EventOnUpdate

// PostLotteryJSONRequestBody defines body for PostLottery for application/json ContentType.
type PostLotteryJSONRequestBody PostLotteryJSONBody
