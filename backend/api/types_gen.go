// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Event defines model for Event.
type Event struct {
	Admins       []string           `json:"admins"`
	Attendees    []string           `json:"attendees"`
	CreatedAt    time.Time          `json:"created_at"`
	Date         openapi_types.Date `json:"date"`
	Description  *string            `json:"description,omitempty"`
	EventId      openapi_types.UUID `json:"event_id"`
	IsDeleted    bool               `json:"is_deleted"`
	IsMeAttendee bool               `json:"is_me_attendee"`
	IsOpen       bool               `json:"is_open"`
	Title        string             `json:"title"`
	UpdatedAt    time.Time          `json:"updated_at"`
}

// EventBase defines model for EventBase.
type EventBase struct {
	Admins       []string           `json:"admins"`
	Attendees    []string           `json:"attendees"`
	Date         openapi_types.Date `json:"date"`
	Description  *string            `json:"description,omitempty"`
	IsMeAttendee bool               `json:"is_me_attendee"`
	IsOpen       bool               `json:"is_open"`
	Title        string             `json:"title"`
}

// EventSummary defines model for EventSummary.
type EventSummary struct {
	Admins       []string           `json:"admins"`
	Date         openapi_types.Date `json:"date"`
	Description  *string            `json:"description,omitempty"`
	IsMeAttendee bool               `json:"is_me_attendee"`
	IsOpen       bool               `json:"is_open"`
	Title        string             `json:"title"`
}

// EventUpdate defines model for EventUpdate.
type EventUpdate struct {
	Admins       []string           `json:"admins"`
	Attendees    []string           `json:"attendees"`
	Date         openapi_types.Date `json:"date"`
	Description  *string            `json:"description,omitempty"`
	IsDeleted    bool               `json:"is_deleted"`
	IsMeAttendee bool               `json:"is_me_attendee"`
	IsOpen       bool               `json:"is_open"`
	Title        string             `json:"title"`
}

// Lottery defines model for Lottery.
type Lottery struct {
	CreatedAt time.Time          `json:"created_at"`
	EventId   openapi_types.UUID `json:"event_id"`
	IsDeleted bool               `json:"is_deleted"`
	LotteryId openapi_types.UUID `json:"lottery_id"`
	Title     string             `json:"title"`
	UpdatedAt time.Time          `json:"updated_at"`
	Winners   []string           `json:"winners"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// IfDeleted If include the deleted events
	IfDeleted bool `form:"ifDeleted" json:"ifDeleted"`
}

// GetLotteriesParams defines parameters for GetLotteries.
type GetLotteriesParams struct {
	// IfDeleted If include the deleted lotteries
	IfDeleted bool `form:"ifDeleted" json:"ifDeleted"`
}

// PostLotteriesJSONBody defines parameters for PostLotteries.
type PostLotteriesJSONBody struct {
	Title string `json:"title"`
}

// PostLotteryParams defines parameters for PostLottery.
type PostLotteryParams struct {
	// IfDuplicated If allow duplicated winning in the same event
	IfDuplicated bool `form:"ifDuplicated" json:"ifDuplicated"`
}

// PostEventsJSONRequestBody defines body for PostEvents for application/json ContentType.
type PostEventsJSONRequestBody = EventBase

// PatchEventJSONRequestBody defines body for PatchEvent for application/json ContentType.
type PatchEventJSONRequestBody = EventUpdate

// PostLotteriesJSONRequestBody defines body for PostLotteries for application/json ContentType.
type PostLotteriesJSONRequestBody PostLotteriesJSONBody
