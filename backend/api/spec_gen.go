// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY30/jOBD+V6K5e/Q1FcdJp7yBQKfqkGCF9glVlUmm1Cixg+2wqqL87yvbSZM2JrRL",
	"f+yifSLE4/HMN998GbeEWGS54Mi1gqgEFS8wo/bx+hW5Ng80TW/nED2U8KfEOUTwR9huCusdoTW/pAqh",
	"IiXkUuQoNUPrKpZINSYzav3NhczMEyRU41+aZQgE9DJHiEBpyfgTVATQ+JuxZG1HUbDEZ8zULMEUNVrz",
	"evlRiBQpN+tFnuwYQEVA4kvBpHH50EazdtaaY9JNc7pyKB6fMdZQTSsCLUa7wXpfZBmVSw+yVGvkCbp/",
	"mMbMPiSoYslyzQSHCLSkX4LJlQ+3+gWVki57Obe+B7JpQot6kSUZ43sJi9g69Qrn27h2QunlSYazJjE/",
	"V5iaiRy5f1EznaLH9QZ0zow0cTYuewGQBqY+wjW+X/Mm+Y+34XCXbKTQMfaX/0Zojb7Kn7zbUxfZtu7e",
	"qumPyAaBb4xzlIfox05apCtIDdm2EqY2wH5VzYGMz4XFwoECF3cTIPCKUrngx6PxaGxCNYSmOYMI/h6N",
	"R+dAIKd6YdMNbXD28QktdIYe1KQ/SSCC/1BfOwuzSdIMtUXsYROpyTxgPE6LBAO9wKDOLsBmMzNGL4Vh",
	"IQFOMxMwm3dQcF3hZfvUgKtywZVj7dl4bMkruG6+e3mestiGHT4rpyitw73I9w60rzxNWG1KHtz+b2rz",
	"j8tlA0yuUXKaBvcoX1EG11IK6fzSJ4N+/cU3vZ0L5anbnVBt4QwzUelLkSx3wm1L8Vonv5YFVh8s2LsH",
	"w6HwrEjTEmFp/06uKufP8LSP85V973b3OsRy3rRaS/naJ2wi1uX/e+x6ox0Owq5BUTh1xr8An6zUxgtP",
	"g5rXJ0DxQEpQzz7ba8GRejd08xvlMb7fxhet7efp5U5Sw5+Lz5+9lyBuVKs/8m/J3c3K6FjQkC0HrLQT",
	"2SlnrNUAPSQVzT2kPz7vV32bc4YJf/yifkCB14fRne62/tvDfie29fB2utVV3vAOwoZhAQjLOu6tZr7G",
	"6xEFweN5FfFPrsPdjhwW2U+N6F4GrpWKnlA1f1epr3ru15odfkQ6pvJVBJQ18/14cyNimgZuHQgUMoUI",
	"FlrnKgrD1CwuhNLR2fj8XzCg1f7Lphr1HYqsXnTGrs7bFXGn1fcAAAD//5TXp47NGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
