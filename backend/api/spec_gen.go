// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYb0/bRhj/KtFtLzbJI1HXSZPftQJNaEh0q/YKIXSNL+DK/3q+MKHIEnbGYFWmMtCK",
	"WCe11RBdhRrKygvUDvphDqfhW0x3Zzt24phkJEGFV3F85+ee+/2e5/c8dxVQNHXLNJBBbCBXgF1cQDrk",
	"jxOLyCDsAWradAnIMxXwKUYlIINP8q2P8sEXeT79NrQRcKQKsLBpIUxUxE0VMYIEKXOQ2yuZWGdPQIEE",
	"fUFUHQEJkCULARnYBKvGPHAkgJi9OVVJfFEuq0raZNWeU5CGCOLTg+F7pqkhaLDxsqX06YAjAYwelFXM",
	"TM60vEmslTAsxbc5Gxk0791HRQKcWUcCLYzkdoigoqsGf1IJ0vmDguwiVi2imgaQAcHwu9zkeNrugxcQ",
	"Y7jE/kNCkKEgNCBzbIcdsKV9mFihksqSjuZC79KZUu0500JG+iBRiYZSTLeRJaYl/ZFCr8MFOtyRQg7i",
	"AHbyGLA4bfxghcBcSyZHxVI/pNwt6zrES8PlZGAg9qtwI8mdmNBdMI3SWJoyCUFpBF16hdCEZ72a64bm",
	"/yk1EvhRNQyEBxKfbXTGtiWlcdtTMWs52MkpW1A1SibHQoACbt2ZBBJYRNgWzhfGCmMF5iqLGGipQAZf",
	"jhXGbgIJWJAs8O3muXP8cR5x6Fh4QLb9SQXI4BtEJsQM9hGGOiIcsZl2pKi7Sd06rf5Gqy9p9Tmt/ku9",
	"99St5Qguoxx16/6zQ399jS67/i8Pz7Z3Gkdr1H3PPvF2aHWbVt/Q6hr1PH99j3oudXf9R4/9ky3qblH3",
	"hLrbDDS2zoMyC2QJGFBne1ZL4xGOLQLYmlLQVKXFnTPLZtuWadgiD24UCjwdTIOE3ZdlaWqRA5G/bwsp",
	"aRmMwuXc1izUxs6IaZcqMP0tm/WVcCU5NGkQhA2o5e4ivIhwbgJjE/Oos0PtBQkg3frp0XJz9wX1NjqB",
	"JHCeURi0mqxDskw7hfw7pi3YD8BFNrltKkt9IdVj75pMIMafc0GKkkLXh2g5qck2UKoaj19zPn5KBv/G",
	"6fGfjbX1LKocKUzZfIX/To47wgeWBZ0UiuwISWzLYJ5QTApa+RTYzMym8/DrklyDRbC26tf/4Eg9bQNR",
	"6Et2vGdq3WUDNbjcGkbodgPerTdfvvlw+LpXxYGkuJAiOez1JbAwJHGLjiu9C9yo2GpUV/xnB9TbaDw5",
	"DPWoD9HJi84TGkV0vv7cas29FiLk1v3Vt/7Rqw/b785q/1Bvg3qvaPUvNuq9o9W9NLBjGGVX5GsH5l4b",
	"mM3nNVY6MwFMDVnRlQcdQbcSMBVNGhW60sB66cbD4zP36Gp10eHZdfgNdJZYCmB76qpDh7OzOJz1EVS5",
	"ZCfd1zVT+sF1mI1+XxcKo2j1M2Rt/4S/342OA2H+ZhwEWtGVLXH5SoBETweEUUejlGo58vijKlYRad0P",
	"HnFJyK47V5qCgfTVUT0YaqpGgt/DoeZ8wf/e1LSrxO9FOpb12unRclwJ/Z9XqPuCuvWz1V+bO6v+8aZI",
	"p+bfB/6j/Qjw3GclqNlxY6zNYcYEV6GZ/YQZdz808zv1atzSE+ptft69ESqLwBx1L5SsYuLit4/76BFX",
	"spbm1Z/ydnyLUcshby6vsEPlwdtwcvcCxszz9dIulKfMItRyYhxIoIw1IIMFQixbzuc1Nrhg2kS+Ubj5",
	"NWDoB/YrIZXBBYgUvYidD2JvIzmZdf4LAAD//2a7BAaVHwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
