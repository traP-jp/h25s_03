// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY30/DNhD+V6LbHr2mYkya8gYCTdWQYEJ7QlVlkis1SuxgO0xVlP99sp00SWNCO/pj",
	"Q3sixOfz3XfffTm3hFhkueDItYKoBBWvMKP28fYduTYPNE3vlxA9lfCjxCVE8EPYbgrrHaE1v6YKoSIl",
	"5FLkKDVD6yqWSDUmC2r9LYXMzBMkVONPmmUIBPQ6R4hAacn4C1QE0PhbsKS3oyhY4jNmapFgihqteb38",
	"LESKlJv1Ik/2DKAiIPGtYNK4fGqj6Z3Vc0y6ac43DsXzK8YaqnlFoMVoP1gfiyyjcu1BlmqNPEH3D9OY",
	"2YcEVSxZrpngEIGW9I9gduPDrX5BpaTrQc6t75FsmtCiQWRJxvhBwiK2ToPC+Tb2Tii9PMlw0STm5wpT",
	"C5Ej9y9qplP0uN6CzpmRJs7G5SAA0sA0RLjG98+8Sf7rbTjeJVspdIz95b8TWqOv8mfv9tRFtqu7j2r6",
	"T2SDwF+Mc5TH6MdOWqQrSA3ZdhKmNsBhVc2BjC+FxcKBAlcPMyDwjlK54KeT6WRqQjWEpjmDCH6eTCeX",
	"QCCnemXTDW1w9vEFLXSGHtSkP0sggt9Q3zoLs0nSDLVF7GkbqdkyYDxOiwQDvcKgzi7AZjMzRm+FYSEB",
	"TjMTcA8F1xVets8NuCoXXDnWXkynlryC6+a7l+cpi23Y4atyitI6PIh870H7ytOE1bbkwf3vpja/uFy2",
	"wOQaJadp8IjyHWVwK6WQzi99MejXX3zT27lQnro9CNUWzjATlb4WyXov3HYUrz75tSyw+mLBPj0YjoVn",
	"RZqWCEv7d3ZTOX+Gp0Ocb+x7t3vQIZbzptVaytc+YRuxLv8/Y9cH7XAUdo2Kwrkz/g/wyUptvPI0qHl9",
	"BhSPpAT17LO7Fpyod0M3v1Ee4+dtfNXafp9e7iQ1/rn4/tl7CeJGtfoj/5Hc3W2MTgUN2XHASjuRnXPG",
	"2gzQY1LR3EOG4/Nh1bc5Z5zwpy/qFxS4P4zudbf13x4OO7H1w9vrVld5wzsKG8YFICzruHea+RqvJxQE",
	"j+dNxP9yHe525LjIfmtEDzJwbVT0jKr5f5WGqud+rdnjR6RTKl9FQFkz3483dyKmaeDWgUAhU4hgpXWu",
	"ojBMzeJKKB1dTC9/BQNa7b9sqlHfocjmRWfs6rzdEHde/R0AAP//gXeq980YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
