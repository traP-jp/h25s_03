// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xY34vjNhD+V8y0j2ocrlcofrtjlxK6cFeOPi0h6OxJosWWvJK8SzD+34sk/0qseJNu",
	"fix5imOPxjPfzPdp5BJikeWCI9cKohJUvMaM2sv7F+TaXNA0/baE6LGEXyUuIYJfwm5RWK8IrflXqhAq",
	"UkIuRY5SM7SuYolUY7Kg1t9SyMxcQUI1/qZZhkBAb3KECJSWjK+gIoDG34IlWyuKgiU+Y6YWCaao0ZrX",
	"j38KkSLl5nmRJ0cGUBGQ+FwwaVw+dtFsvWvLMemnOW8dip9PGGuo5hWBDqPjYP1RZBmVGw+yVGvkCbo/",
	"TGNmLxJUsWS5ZoJDBFrSf4LZnQ+3+gaVkm4GOXe+R7JpQosGkSUZ4ycJi9g6DQrnW7j1htLbJxkumsT8",
	"vcLUQuTI/Q810yl6XO9A58xIE2fjchAAaWAaIlzj+2/eJP9+Go6zZCeFnrG//A9Ca/RV/upsT11kh7rb",
	"V9P/IxsEXhnnKM/Bx15apC9ITbMdJExdgMOqmhcyvhQWCwcKfPk+AwIvKJULfjqZTqYmVNPQNGcQwe+T",
	"6eQzEMipXtt0QxucvVyhhc60BzXpzxKI4C/U987CLJI0Q20Re9xFarYMGI/TIsFArzGoswuwWcyM0XNh",
	"upAAp5kJmC3vWhA69LQskNS7m7f558Za5YIr18SfplPby4LrZhvM85TFNovwSTmB6RyeRM2PYEHl4WS1",
	"q4Dw7W9Tqj9cLjvYco2S0zT4gfIFZXAvpZDOL12ZYtQDgKF6LpSnjN+F6upooEalv4pkcxRuB2rZNhdM",
	"Nat3FuyEyJ8J94o0TApL+zu7q5w/09/Deri+d6sHxLJUMQztmFL7HOXJW1jsoc1ZunBUS66d8ekaHs7I",
	"Y6rjtYfI5vYVUDyTYtQj0+GacSHuhm7sozzGt2n8pbO9HS73khrfVm4/e2+DuAmv3pL2yd1Da3QpaMiB",
	"c1nai+wDjWbtGD6mHM1pZjiEn1aMm/eM9//la/wOQd6epI46IfvPIOcc9I46G5591Ou6YVwPwrKO+6AR",
	"sPF6QX3weG4j/uCy3GfkuObeNKInmb9aFb2iat5GlXx7Lk1T8RokhasOJsEr45zxVcC43YcVzdB9HNm/",
	"AbeLL7sHb4uw+wR1xJexSwpxRUBZM98XqQcR0zRwz4FAIVOIYK11rqIwTM3DtVA6+jT9/CcY0Gr/ZVOB",
	"+oRH2hu9obB3t+XRvPovAAD//zFqm8aiGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
