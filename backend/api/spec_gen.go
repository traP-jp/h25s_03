// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYXU8bRxf+K9a870UrbbHVDynau0RBFSoVaaNcIYQm3jFstF+ZHVMhayV2XQKNXIWC",
	"GkRTKYmKSFMUExouUFLIjxnWMf+impn98NrrxS62UeDK653ZM2ee55znnJkKKJq6ZRrIIDaQK8AuziMd",
	"8sfxBWQQ9gA1baoE5OkK+D9GJSCD/+Xjj/LBF3k+/Qa0EXCkCrCwaSFMVMRNFTGCBCmzkNsrmVhnT0CB",
	"BH1GVB0BCZBFCwEZ2ASrxhxwJICYvVlVSXxRLqtK2mTVnlWQhgji04Phu6apIWiw8bKl9OmAIwGM7pdV",
	"zExOx94k1koYllq3ORMZNO/eQ0UCnBlHAjFGcjtEUNFVgz+pBOn8QUF2EasWUU0DyIBg+F1u4mba7oMX",
	"EGO4yP5DQpChIDQgc2yHHbClfZhYoZLKko5mQ+/SmVLtWdNCRvogUYmGUky3kSWmJf2RQq/DBTrckUIO",
	"WgHs5DFgccq4Y4XAXEkmR8VSP6TcLus6xIvD5WRgIParcCPJnRahO2capbE0aRKC0gi68AqhCc96NdcN",
	"zf9SaiTwg2oYCA8kPtvobNmWlMZtT8UsdrCTU7agapRMjoUABVy/NQEksICwLZwvjBXGCsxVFjHQUoEM",
	"vhgrjH0JJGBBMs+3m+fO8cc5xKFj4QHZ9icUIIOvERkXM9hHGOqIcMSm25Gi7gZ167T6C62+pNXntPoP",
	"9d5Tt5YjuIxy1K37zw78tVW65Po/PTzd2m4crlL3PfvE26bVLVp9Q6ur1PP8tV3qudTd8R899o83qbtJ",
	"3WPqbjHQ2Dr3yyyQJWBAne1ZLd2McIwJYGtKQVOVFnfODJttW6Zhizz4vFDg6WAaJOy+LEtTixyI/D1b",
	"SElsMAqXM1uzUBs7I6ZdqsDUN2zWV8KV5NCEQRA2oJa7jfACwrlxjE3Mo84OtRckgHTrJ4dLzZ0X1Fvv",
	"BJLAOUZh0GqyDsky7RTyb5m2YD8AF9nkhqks9oVUj71rMoEYf845KUoKXR+i5aQm20Cpajx+zfn4MRn8",
	"6ydHvzdW17KocqQwZfMV/jtx0xE+sCzopFBkR0hiWwbzhGJSEOdTYDMzm87Cr0tyDRbB2opf/40j9bQN",
	"RKEv2fGeqXUXDdTgcmsYodsNeLfefPnmw8HrXhUHkuJ8iuSw1xfAwpDELTqu9C5wo2KrUV32n+1Tb73x",
	"5CDUoz5EJy86T2gU0dn6cz2eeyVEyK37K2/9w1cftt6d1v6m3jr1XtHqH2zUe0eru2lgt2CUXZGvHJi7",
	"bWA2n9dY6cwEMDVkRVcedATdSsBkNGlU6EoD66UbD49O3cPL1UWHZ9fhN9BZYimA7amrDh3OzuJw1kdQ",
	"5ZKddF/XTOkH12E2+n1dKIyi1c+Qtb1j/n4nOg6E+ZtxEIijK1vi8pUAiZ4OCKOORinVcuTxR1WsItK6",
	"HzxaJSG77lxqCgbSV0f1YKipGgl+D4easwX/e1PTLhO/5+lY1monh0utSug/WKbuC+rWT1d+bm6v+Ecb",
	"Ip2af+77j/YiwHOflKBmtxpjbQ4zJrgKzewlzLh7oZlfqVfjlp5Qb+PT7o1QWQTmqHuhZBUTF7993EeP",
	"uJLFmld/ytvxTUYth7y5tMwOlftvw8mZBaxsI2zndZTVkX+LwEDBFVxXLgDC5spf/uoD6tYDHjNl5Y6N",
	"MEOJWeAm067dJ80i1HJiHEigjDUgg3lCLFvO5zU2OG/aRL5WuFYALEYD4yEIYhGWz8H/4NooftFyqmp5",
	"G4nwjPNvAAAA///0chfXyyAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
