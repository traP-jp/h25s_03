// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYTW/jNhD9K8K0RzYytlug0G0XCQqjAXaLPQaBwZXGMRcSqSVHCQJB/70gqU+bcezG",
	"H6lPpqXhaOa9N8ORakhVUSqJkgwkNZh0hQV3y5tHlGQXPM+/LCG5q+FXjUtI4Jd42BS3O2Jn/pkbhIbV",
	"UGpVoiaBzlWqkRNmC+78LZUu7AoyTvgbiQKBAT2XCAkY0kI+QMMArb+FyCY7qkpkIWNhFhnmSOjM29vf",
	"lcqRS3u/KrM9A2gYaPxZCW1d3g3RTJ41cczGad73DtX3H5gSNPcNgwGjZB0inhVCupUgLNwiQ5NqUZJQ",
	"EhIgzf+J5teh7NsLXGv+bP9zIpQZ4oHc2Qw3YAttnDyhDrJU4KKLLsyUMAtVogzfJEE5BlyvkeXNpvGw",
	"LuruARvhsI6DMYCbPLYsfquKguvn4xJ5MOT3LaaT0DSqqTcyFmLpVhFhiKCzN6PcR7aru5fQ/C9djcGT",
	"kBL1QfS5RucoLRbidqe+OQS4yal9oJBL5bDwoMCnr3Ng8Ija+OBnV7OrmQ3VKoaXAhL4/Wp29REYlJxW",
	"Lt3YBeeWD+igs/LgNv15Bgn8hXTjLewmzQskh9jdOlLzZSRkmlcZRrTCqM0uwm6zsEY/K6tCBpIXNmCx",
	"vO5BGNAjXSFrD9+QaJp7a21KJY0X8YfZzGlZSepO6bLMReqyiH8Y3wcGhz3Xrx7hXWPbpHu9z8CXv63V",
	"Hz6UNWgkoZY8j76hfkQd3WittJMM8QeLZTte2FOxVCbAwldlBhosUmjos8qe90p7x4FlKmVLRvNGvKct",
	"Z4/20QRlfwTcG9YVQly73/l14/1ZeW7y4WXrd2/UhVO6LbBB6K3PrTJ/DYsXVH8UFW5tBefO+HCCP2Yd",
	"c0pXgUK2l8+A4vvoGCeq3NgPRVym+HoRfxpsL6eSR0ltP1QuP/ugQPx41h5ILzW7297oVNCwHYeqfBTZ",
	"/22u6l5Fjj1Sdc/Zrv/Tc/yGdjydo/Z6/w+/QBxzzNvrxe7og96ghu39IK7buHcaADuvJ+wPAc99xO+8",
	"LY8rcnvPvWhEDzJ99V30jF3zMlgKnbk8z9VTlFWeHcyiJyGlkA+RkO4cNrxA/2Xj5QO433zaM3jahP33",
	"oz0+a52yETcMjDMLfU66VSnPI38fGFQ6hwRWRKVJ4ji3N1fKUPJh9vFPsKC1/uuOgfb9jvUXRkPh6Gpf",
	"R/fNvwEAAP//yLkw5f4ZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
