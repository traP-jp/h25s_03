// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xY32/bNhD+V4TbHrnI6Dpg0FuLBIOxAO1Q7CkIDFY6xywkUiVPCQJD//tAUj9tRrUW",
	"2yn8ZMI6nu6+++7jiVtIVVEqiZIMJFsw6QYL7pY3jyjJLnief1pDcreFXzWuIYFf4n5T3OyInflHbhBq",
	"toVSqxI1CXSuUo2cMFtx52+tdGFXkHHC30gUCAzouURIwJAW8gFqBmj9rUQ22lFVIgsZC7PKMEdCZ948",
	"/qpUjlza51WZzQygZqDxeyW0dXnXRzN618gxG6Z53zlUX79hSlDf1wx6jObB+qUqCq6fA8jyrBDSrQRh",
	"4RYZmlSLkoSSkABp/k+0vA6B1vzBtebWNXAilBnikdxZYPbQDm0cvWEbLG6Bqza6cIGFWakSZfghCcox",
	"4Hqnxt6MtXG2LvcCYC3qQ8gmCt5WLzll8Y6G9ty+O0tpBu03u0r7lWnq8m/ZgvZ6hZsWoJ1sBsZh2twq",
	"Igwx5s2FNPeRHerupfL+H0Vm8CSkRH2UhtmpyCAtFiLbQZrfB7hfVftCIdfKYeFBgQ+fl8DgEbXxwS+u",
	"FlcLG6olNC8FJPD71eLqPTAoOW1curELzi0f0EFn6cFt+ssMEvgL6cZb2E2aF0gOsbtdpJbrSMg0rzKM",
	"aINRk12E7WZhjb5XloUMJC9swGJ93YHQo0e6QtYMDkHy31trUyppPInfLRaOy0pSO2GUZS5Sl0X8zXhh",
	"6h0efjzWu/oGn/62gP7h37iDgCTUkufRF9SPqKMbrZV2zCD+YCFrJiDbkKUyAbA/K9OjbQFBQx9V9nzc",
	"7LzijBlrMa9fCetYWWaoRB1k9wlwr1nL93jrfpfXtfdnWbhfD89Ov3uP/o7Qto96Pjc+J9n8IyxeIPdJ",
	"WDjZ8W+d8fEIf8o+5pRuAo1s/34DFE+kGM1gc7hmnKl3Yz+ccZnij9v4Q297Ob08SGr6WLn87IME8XNY",
	"cyS9JHe3ndG5oGEHTk/5ILKfaIDqhuUp5Wi/OfZH5eOKcfueaf6fv8avEOTxJDXrtiH8pXDKQW/WF9zJ",
	"R72eDdN6EG+buA8aAVuvZ9SHgOcu4p9clocdOa25F43oUeavTkXfUDUvo0qhM5fnuXqKsspXB7PoSUgp",
	"5EMkpDuHDS/QX2G8fAB3m897Bo9F2F8Uzbi/OqcQ1wyMMwvdG92qlOeRfw4MKp1DAhui0iRxnNuHG2Uo",
	"ebd4/ydY0Br/27YCzRce6/4YDIWDf7s+uq//CwAA///63YbboxoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
