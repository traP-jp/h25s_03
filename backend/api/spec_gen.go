// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY0U/7NhD+V6LbHr2m+o1JU95AoKkaEkxoT6iqTHKlRokdbIepivK/T7aTJmlMaKGl",
	"A+2JYJ/Pd9999+XSEmKR5YIj1wqiElS8wozax6sX5No80DS9WUJ0X8LPEpcQwU9heyisT4TW/IIqhIqU",
	"kEuRo9QMratYItWYLKj1txQyM0+QUI2/aJYhENDrHCECpSXjj1ARQONvwZLeiaJgic+YqUWCKWq05vX2",
	"gxApUm72izzZM4CKgMTngknj8r6NpndXzzHppjnfOBQPTxhrqOYVgRaj/WC9K7KMyrUHWao18gTdP0xj",
	"Zh8SVLFkuWaCQwRa0r+C2aUPt3qBSknXg5xb3yPZNKFFg8iSjPGDhEVsnQaF8x3s3VB6eZLhoknMzxWm",
	"FiJH7t/UTKfocb0FnTMjTZyNy0EApIFpiHCN7995k/zH23C8S7ZS6Bj7y38ttEZf5U/e7amLbFd3r9X0",
	"PbJB4B/GOcpj9GMnLdIVpIZsOwlTG+CwquZCxpfCYuFAgfPbGRB4Qalc8NPJdDI1oRpC05xBBL9OppMz",
	"IJBTvbLphjY4+/iIFjpDD2rSnyUQwR+or5yFOSRphtoidr+N1GwZMB6nRYKBXmFQZxdgc5gZo+fCsJAA",
	"p5kJuIeC6wov2+cGXJULrhxrf0ynlryC6+a9l+cpi23Y4ZNyitI6PIh870H7ytOE1bbkwc2fpja/uVy2",
	"wOQaJadpcIfyBWVwJaWQzi99NOjXb3zT27lQnrrdCtUWzjATlb4QyXov3HYUrz75tSyw+mDB3rwYjoVn",
	"RZqWCEv7d3ZZOX+Gp0OcL+26Oz3oEMt502ot5WufsI1Yl/9vseuVdjgKu0ZF4dQZfwE+WamNV54GNcsn",
	"QPFISlDPPrtrwSf1bujmN8pjfLuNz1vb79PLnaTGXxffP3svQdyoVr/kX5O7643RV5G8zUA71rrNd8Fw",
	"nD2sGjb3jBPwRCC/TxH7w+Fe35r+af6wE1Q/vL2+sipveEdhw3hDhmUd904zWOP1s7hDvJ43Ef/HdbHb",
	"keOi960RPcgAtFHRE6rm/1Uaqp779WSPH3U+U/kqAsqa+X5MuRYxTQO3DwQKmUIEK61zFYVhajZXQuno",
	"x/TsdzCg1f7Lphr1Nw3ZLHTGoM7qhrjz6t8AAAD//x/my9xdGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
