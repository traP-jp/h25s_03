// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY3U4bRxR+FWvai1baeq3+SNHeJQqqUKmgjXKFEJp4x3jR/jE7S4QsS+y6BBq5CgU1",
	"iKZSEhWRpigmNFygpJCHGdYxb1HN7I+99nqxi20UuPJ6Z/bMme875ztnpgTyhmYaOtKJBaQSsPJFpEH+",
	"OLaIdMIeoKpOFoA0XQKfYlQAEvhEbH4kBl+IfPotaCFQFkrAxIaJMFEQN5XHCBIkz0Jur2BgjT0BGRL0",
	"BVE0BARAlkwEJGARrOhzoCwAxOzNKnLsC9tW5KTJijUrIxURxKcHw/cMQ0VQZ+O2KffpQFkAGC3YCmYm",
	"p5vexNaKGRZatzkTGTTuzaM8AeWZsgCaGEntEEFZU3T+pBCk8QcZWXmsmEQxdCABguEPmfHbSbsPXkCM",
	"4RL7DwlBuozQgMyxHXbAlvRhbIVSIksamg29S2ZKsWYNE+nJg0QhKkow3UaWPy3ujxB6HS7Q4Y4QctAK",
	"YCePAYuT+l0zBOZaMjkqlvoh5Y6taRAvDZeTgYHYr8KNJHdahO6CaZTE0oRBCEoi6NIrhOp71qu5bmj+",
	"n1IjgPuKriM8kPhso7NlW0IStz0Vs6aDnZyyBRW9YHAsfFDAzalxIIBFhC3f+Vw2l80xV1nEQFMBEvgq",
	"m8t+DQRgQlLk2xW5c/xxDnHoWHhAtv1xGUjgW0TG/BnsIww1RDhi0+1IUWeTOjVa+ZVWXtLKc1r5l7rv",
	"qVPNEGyjDHVq3rNDb32NLjvezw/PtnfqR2vUec8+cXdoZZtW3tDKGnVdb32Pug51dr1Hj72TLepsUeeE",
	"OtsMNLbOgs0CWQA61NielcLtCMcmAWxNIWiqkuKuPMNmW6ahW34efJnL8XQwdBJ2X6apKnkOhDhv+VLS",
	"NBiFy7mtWaiNnRHTLlVg8js26xvflfjQuE4Q1qGauYPwIsKZMYwNzKPOCrUXxIB0aqdHy43dF9Td6ASS",
	"wDlGYdBqsg7JNKwE8qcMy2c/ABdZ5JYhL/WFVI+9azyBGH/lC1IUF7o+RKucmGwDpar++DXn46d48G+c",
	"Hv9RX1tPo6oshCkrlvjv+O2y7wPLgk4K/ewISWzLYJ5QTAqa+RTYTM2m8/DrklyDRbC66tV+50g9bQPR",
	"15f0eE/VussGanC5NYzQ7Qa8U2u8fPPh8HWvigNJvpggOez1JbAwJHGLjiu9C9yo2KpXVrxnB9TdqD85",
	"DPWoD9ER/c4T6nl0vv7cbM69FiLk1LzVt97Rqw/b786q/1B3g7qvaOVPNuq+o5W9JLBbMEqvyNcOzL02",
	"MBvPq6x0pgKYGLJ+Vx50BN1KwEQ0aVToCgPrpesPj8+co6vVRYdn1+E30Gli6QPbU1cdOpyexeGsj6DK",
	"xTvpvq6Zkg+uw2z0+7pQGEWrnyJr+yf8/W50HAjzN+Ug0IyudIkTSwESPR0QRh2NQqLlyOOPqlhFpHU/",
	"eLRKQnrdudIUDKSvjurBUFM1EvweDjXnC/6PhqpeJX4v0rGsV0+PlluV0HuwQp0X1Kmdrf7S2Fn1jjf9",
	"dGr8deA92o8Az3xWgKrVaoy1OcyYz1VoZj9mxtkPzfxG3Sq39IS6m593b4RsPzBH3QvFq5h/8dvHffSI",
	"K1lT82pPeTu+xajlkDeWV9ih8uBtODm1gNkWwpaoobSO/HsEBgquz3XpEiBsrP7trT2gTi3gMVVW7loI",
	"M5SYBW4y6dp9wshDNeOPAwHYWAUSKBJiSqKosrGiYRHpRu5GDnRm7RQ2ZDvP/iRZsCRRJBgu2PNKlmBo",
	"Zq2icV+EphKYm4lcDSH1XWbrBP+DS6jmi5YzWsvbSNJnyv8FAAD//0RtVQgZIQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
