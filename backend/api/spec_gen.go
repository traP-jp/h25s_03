// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX0WvbPhD+V8z9fo9aHLoOht9aWkZYoR1lTyUE1b40KrbkSueOYvy/D8l27CRKmqzJ",
	"uuYpQro73ffpu/OlhFhluZIoyUBUgolnmHG3vHxGSXbB0/R6CtFdCf9rnEIE/4WdU9h4hM78nBuEipWQ",
	"a5WjJoEuVKyREyYT7uJNlc7sChJO+IlEhsCAXnKECAxpIR+gYoA23kQkCx5FIRKfsTCTBFMktNbN6b1S",
	"KXJpj4s82fH+ioHGp0JoTCC665LpX7UQl/VBjufx1P0jxgTVuGLQMbQbqbdFlnH94uGVJ5mQbiUIM7dI",
	"0MRa5CSUhAhI8x/B6MJHWbPBteY2NHAilAniXsIt0dfk2b9kA0Ut3mgZriV75QF9ySxkXb5dWxlOHAS/",
	"uoSZqBzXHJKgFD1JrBdY7cFacG30xURW6WvI+5m3LL29bPdXgtuUk18RV4oIfWJ4756S1oltG22dDv6k",
	"OTH4JaREfYhS7cFiPlVu0/66/Fbf1N4n5FQ5KmpO4OxmBAyeUZs69+FgOBjaTK3weS4ggs+D4eAUGOSc",
	"Zg5t6HJzywd0zFlxcIt+lEAE35AuawvrpHmG5Ai7WyZqNA2EjNMiwYBmGNTgkgBbZ1v18FRYDTKQPLMJ",
	"90moC8kr+rGl1uRKmlqyJ8OhU66S1H5a8zwVscs6fDR1t+oCzp92h0/E8usud0O4/m6tvtSpLFEhCbXk",
	"aXCL+hl1cKm10k4hxB8sd81MYOsyV8bD+o0yHe1WVmjoXCUvO8Hesl0tKpd0gZWf7wPgr1grwLB0v6OL",
	"qo7XNoxFXi7cfu29okenMCvsTmBNTFhG2JfbKy1nnfoOooaNJfjeiPcnvEPWE6d45ikou/0OLB6ocpvp",
	"5J+r3bAeTLmM8fUyPutsj6eWe6A2t/fjR+8VSD0XNbPnunZ3NTf6KC1vqxGjncEPPV2092wWYGt1POrr",
	"cG+WXlg20/lW08bf5ol5I88z/jBvwF4p76NmdC+f+nm/OFh/sLvGmfn+0l2pmKdBfW7/puoUIpgR5SYK",
	"w9QezpSh6GR4+hUsEU38smW4mfXYfKP3eejtzmGOq98BAAD//xgqQQRHFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
