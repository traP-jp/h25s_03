// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xY32/bNhD+V4TbHrnI6Dpg0FuLBIOxAO1Q7CkIDFY6xywkUiVPCQJD//tAUr9sM6q1",
	"WM7mJxPW8XT3fd8dT9xCqopSSZRkINmCSTdYcLe8eURJdsHz/NMakrst/KxxDQn8FPeb4mZH7Mw/coNQ",
	"sy2UWpWoSaBzlWrkhNmKO39rpQu7gowT/kKiQGBAzyVCAoa0kA9QM0DrbyWynR1VJbKQsTCrDHMkdObN",
	"469K5cilfV6V2cQAagYav1dCW5d3fTQ779pxzIZp3ncO1ddvmBLU9zWDHqNpsH6pioLr5wCyPCuEdCtB",
	"WLhFhibVoiShJCRAmv8VLa9DoDV/cK25dQ2cCGWGeCJ3FpgDtEMbd96wDZJb4KqNLkywMCtVogw/JEE5",
	"BlzvcezNWBtn6/IgANaiPoRshPCWvWRO8k6G9tS6Ows1g/LrWBrkMYGzQ54alv4uWwhf3+/G29FebgPj",
	"sIhuFRGG9PPmbTX3kR3r7iWy/01/ZvAkpER9kvLZY2SQFgtJ76gToA/wkFX7QiHXymHhQYEPn5fA4BG1",
	"8cEvrhZXCxuqFTQvBSTw69Xi6j0wKDltXLqxC84tH9BBZ+XBbfrLDBL4A+nGW9hNmhdIDrG7faSW60jI",
	"NK8yjGiDUZNdhO1mYY2+V1aFDCQvbMBifd2B0KNHukLWjBFB8d9ba1MqabyI3y0WTstKUjtvlGUuUpdF",
	"/M34NtU77LiecGru073fBuHTn9bqNx/KHjSSUEueR19QP6KObrRW2kmG+IPFshmUbKWWygRY+KxMT4NF",
	"Cg19VNnzpLSPbEW7UrZk1K/Ee7flTGgfdVD2M+Bes7YQ4q37XV7X3p+V5yEfXrZ+90FdOKXbAuuF3vgc",
	"lfmPsHhB9bOocLQVvHXGpxP8nHXMKd0ECtn+/QYoztQxmonn+J5xptqN/dTGZYo/LuMPve3l1PIgqfFj",
	"5fKzDwrED2jNkfRSu7vtjM4FDTtyrMoHkf3fJqv2Y2Tuoap9z7j+z8/xKxry7iQ16VIi/Akx56A36dNu",
	"9lGvV8N4P4i3TdxHjYCt1zP2h4DnLuL/eFseVuR4z71oRE8yf3Vd9A275mWwFDpzeZ6rpyirPDuYRU9C",
	"SiEfIiHdOWx4gf5u4+UDuNt83jN4twn7G6QJF1vnbMQ1A+PMQhdKtyrleeSfA4NK55DAhqg0SRzn9uFG",
	"GUreLd7/Dha0xv+2ZaD5wmPdH4OhcPBvV0f39T8BAAD//8klfu/KGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
