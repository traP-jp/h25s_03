// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXUWvjOBD+K2buHnVx6PXg8FtLyxGu0C5ln0oIqj1pVGzJlcZdivF/XyTbseMoabKb",
	"bLd5ipBGo/m++WY8KSFWWa4kSjIQlWDiBWbcLa9fUZJd8DS9nUP0UMKfGucQwR9hdylsboTO/JIbhIqV",
	"kGuVoyaBzlWskRMmM+78zZXO7AoSTvgXiQyBAb3lCBEY0kI+QcUArb+ZSFZuFIVIfMbCzBJMkdBaN6eP",
	"SqXIpT0u8mTP9ysGGl8KoTGB6KELpv/Uil/WBzld+lOPzxgTVNOKQcfQfqTeF1nG9ZuHV55kQrqVIMzc",
	"IkETa5GTUBIiIM2/BJMrH2XNBteaW9fAiVAmiAdxN6CvibP/yBaKWrzREK4ley2BvmBWoi69cslw5qLy",
	"C0aYmcpxwyEJStHjdwC6NmNtkK3LdeAN7K95i+/nC+5wxbNLIfhzeaOI0JfGj+4GaR3Yrt42pftH2gqD",
	"b0JK1Mcosh4s1s9Tq8NdGlcX33pO7XtCzpWjouYELu4mwOAVtaljH4/Go7GN1Eqd5wIi+Hs0Hp0Dg5zT",
	"wqENXWxu+YSOOSsObtFPEojgP6Tr2sJe0jxDcoQ9DImazAMh47RIMKAFBjW4JMD2si1ueCmsBhlIntmA",
	"+yTUheQV/dRSa3IlTS3Zs/HYKVdJaj+KeZ6K2EUdPpu6z3QOl6ndo7kPszvsY3D7v7X6pw5lQIUk1JKn",
	"wT3qV9TBtdZKO4UQf7LcNV9zW5e5Mh7W75TpaLeyQkOXKnnbC/aO7WpVuaQLrPx8HwF/xVoBhqX7nVxV",
	"tb+2YazycuX269trenQKs8LuBNb4hCHCvtzeaTmb1HcUNWwtwY9GfDjhHbOeOMULT0HZ7Q9g8UiV20wn",
	"v13thvVIyWWM75fxRWd7OrXcA7W9vZ8+eq9A6rmomT03tbubpdFnaXk7jRjtDH7s6aJ9Z7sAW6vTUV+H",
	"e7v0wrKZzneaNn41T8zreRnxp8kBe6e8T5rRg3zql/3iaP3B7hpn5vtLd6Ningb1uf2bqlOIYEGUmygM",
	"U3u4UIais/H5v2CJaPyXLcPNrMeWG73PQ293CXNafQ8AAP//FvXFSgEVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
