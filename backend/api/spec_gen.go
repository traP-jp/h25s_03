// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY3U4bRxR+FWvai1baYitNpWrvEiWqUKlIG+UKITTxjmGj/cvsmApZK7HrEmjkKhTU",
	"IJpKSVREmqKY0HCBkkIeZljHvEU1M/vjtdeLXWyjwJXXO7NnznzfOd85MxVQNHXLNJBBbCBXgF2cQzrk",
	"jzfnkUHYA9S0yRKQpyrgU4xKQAaf5OOP8sEXeT79OrQRcKQKsLBpIUxUxE0VMYIEKTOQ2yuZWGdPQIEE",
	"fUFUHQEJkAULARnYBKvGLHAkgJi9GVVJfFEuq0raZNWeUZCGCOLTg+G7pqkhaLDxsqX06YAjAYzul1XM",
	"TE7F3iTWShiWWrc5HRk0795DRQKcaUcCMUZyO0RQ0VWDP6kE6fxBQXYRqxZRTQPIgGD4fW78RtrugxcQ",
	"Y7jA/kNCkKEgNCBzbIcdsKV9mFihksqSjmZC79KZUu0Z00JG+iBRiYZSTLeRJaYl/ZFCr8MFOtyRQg5a",
	"AezkMWBx0rhjhcBcSiZHxVI/pNwu6zrEC8PlZGAg9qtwI8mdFqE7YxqlsTRhEoLSCDr3CqEJz3o11w3N",
	"/1NqJPCjahgIDyQ+2+hs2ZaUxm1PxSx2sJNTtqBqlEyOhQAFXLs1DiQwj7AtnC+MFcYKzFUWMdBSgQy+",
	"HCuMXQUSsCCZ49vNc+f44yzi0LHwgGz74wqQwTeI3BQz2EcY6ohwxKbakaLuOnXrtPorrb6k1ee0+i/1",
	"3lO3liO4jHLUrfvP9v3VFbro+j8/PNncahysUPc9+8TbotVNWn1DqyvU8/zVHeq51N32Hz32jzaou0Hd",
	"I+puMtDYOvfLLJAlYECd7Vkt3YhwjAlga0pBU5UWd840m21bpmGLPLhSKPB0MA0Sdl+WpalFDkT+ni2k",
	"JDYYhcuprVmojZ0R0y5VYPJbNusr4UpyaNwgCBtQy91GeB7h3E2MTcyjzg61FySAdOvHB4vN7RfUW+sE",
	"ksBZRmHQarIOyTLtFPJvmbZgPwAX2eS6qSz0hVSPvWsygRh/zhkpSgpdH6LlpCbbQKlqPH7N+fgpGfxr",
	"x4d/NFZWs6hypDBl8xX+O37DET6wLOikUGRHSGJbBvOEYlIQ51NgMzObTsOvS3INFsHasl//nSP1tA1E",
	"oS/Z8Z6pdecN1OByaxih2w14t958+ebD/uteFQeS4lyK5LDX58DCkMQtOq70LnCjYqtRXfKf7VFvrfFk",
	"P9SjPkQnLzpPaBTR6fpzLZ57KUTIrfvLb/2DVx82353U/qHeGvVe0eqfbNR7R6s7aWC3YJRdkS8dmDtt",
	"YDaf11jpzAQwNWRFVx50BN1KwEQ0aVToSgPrpRsPD0/cg4vVRYdn1+E30FliKYDtqasOHc7O4nDWR1Dl",
	"kp10X9dM6QfXYTb6fV0ojKLVz5C13SP+fjs6DoT5m3EQiKMrW+LylQCJng4Io45GKdVy5PFHVawi0rof",
	"PFolIbvuXGgKBtJXR/VgqKkaCX4Ph5rTBf8HU9MuEr9n6VhWa8cHi61K6D9You4L6tZPln9pbi37h+si",
	"nZp/7fmPdiPAc5+VoGa3GmNtDjMmuArN7CbMuLuhmd+oV+OWnlBv/fPujVBZBOaoe6FkFRMXv33cR4+4",
	"ksWaV3/K2/ENRi2HvLm4xA6Ve2/DyZkFrGwjbOd1lNWRf4fAQMEVXFfOAcLm8t/+ygPq1gMeM2Xljo0w",
	"Q4lZ4CbTrt0nzCLUcmIcSKCMNSCDOUIsW87nNTY4Z9pEvlK4+jVgMRoYD0EQi7B8Dv4H10bxi5ZTVcvb",
	"SISnnf8CAAD//7x6kjfLIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
