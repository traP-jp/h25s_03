// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYb2v7NhD+Kua2l1ocfutg+F1LywgrtKPsVQlBtS+Nii25ktxRjL/7kGTHf6K4SZs0",
	"a9mrCOt0unvuucfnlBCLLBccuVYQlaDiFWbULq9ekGuzoGl6s4TovoSfJS4hgp/C9lBYnwit+QVVCBUp",
	"IZciR6kZWlexRKoxWVDrbylkZlaQUI2/aJYhENCvOUIESkvGH6EigMbfgiW9E0XBEp8xU4sEU9RorOvd",
	"ByFSpNxsF3my5/0VAYnPBZOYQHTfBtO9queXdJOcr/2JhyeMNVTzikCL0H6g3hVZRuWrB1eaZIzbFdOY",
	"2UWCKpYs10xwiEBL+lcwu/RBVj+gUlLjGqjWyBPEg7gbwFfH2b1kBKIm32iYrgF7o4C+YHpRl166ZLiw",
	"UfkJw9RC5LhlUzOdosfvIGlnRpogG5f92zdhqEH4O2+y/Xj7jXbHIOrW1l+ha6E1+opz6h5PXWC7ettW",
	"xPeIBYF/GOcoj9E6nbRIV4Yadu0iR218mzU19zG+FBYKhwmc386AwAtK5WKfTqaTqYnUEJjmDCL4dTKd",
	"nAGBnOqVzTa0sdnlI1rkDDmoyX6WQAR/oL5yFuaQpBlqC9j9EKjZMmA8TosEA73CwCWXBNgcNi0Lz4Xh",
	"IAFOMxNwFwTXEF6mzw20KhdcOcr+mE4tcwXXzasuz1MW26jDJ+XUo3V4EM3eg/OVpwOrobzBzZ+mNL+5",
	"XAZYco2S0zS4Q/mCMriSUkjnlz4a8OuXvGnsXChP2W6FautmeIlKX4jkdS/cdtStPvW1LLD6YMHevBiO",
	"hWdFmo4IS/s7u6ycv0bB+jhf2ufu9EaDWMqbTmsZX/uEIWJd/r/Fri3tcBR2jWrCqTP+AnyyShuvPA1q",
	"Hp8AxSMpQT327K4Fn9S7oZtcKY/x7TY+b22/Ty93khp/XXz/7L0EcYNa/ZLfJnfXa6OvInnrcXasdZuP",
	"gs1h9rBq2NwzTsATgfw+RewPh3t9WvqH+cNOUP3w9vrGqrzhHYUN4w0ZlnXcO81gjdfP4g7xel5H/B/X",
	"xW5Hjovet0b0IAPQWkVPqJr/V2lT9dyfJ3v8pfOZylcRUNbM91/KtYhpGrh9IFDIFCJYaZ2rKAxTs7kS",
	"Skc/pme/gwGt9l821ai/acj6QWcM6jxdE3de/RsAAP//xwxLwlAYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
