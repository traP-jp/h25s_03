// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW32vbMBD+V8Jtj1psug6G31paRlihHWVPJQTVvjQqtqRK50Iw/t/HyXZtp+6PsIY+",
	"RUh3n+6++z7FFaSmsEajJg9JBT7dYCHD8vwRNfFC5vnlGpKbCr46XEMCX6I+KWozohB+Kj1CLSqwzlh0",
	"pDBApQ4lYbaSAW9tXMEryCThN1IFggDaWoQEPDml76AWgIy3UtkooyxVNhWs/CrDHAk5uj29NSZHqfm4",
	"tNme99cCHD6UymEGyU1fzPCqEa4YNrl8wjO395gS1MtaQM/QfqRel0Uh3XaCV5kVSoeVIizCIkOfOmVJ",
	"GQ0JkJN/ZouzKcraDemcZGiQRKgzxA+CGyVWb9A7DBZdV8OSXiG0YyfZJYdH82zcL4inwFW4dVo+yq+M",
	"xRcOSVGOb7fYhImuiA7yeWNtW39tV///2+/jrPQeW0zNihOVXpuA2RAGJ1cLEPCIzjfiiufxPOYKmBhp",
	"FSTwfR7Pj0GAlbQJnUThxrC8w2Bm7lOycBYZJPAL6byJ4CQnCyR0PpDHw4WHEt0WBGhZcAlDLzdETja9",
	"5K69Ndo3fB7FcXjVjKbuibQ2V2moI7r3jeR7wCc37WH1HUPVu5aCy98c9aMpZXy00IROy3x2je4R3ezc",
	"OePC8EjeMRvt284essZP8HhlfE8kTxw9nZpsu1fb75TrWFTkSqyn+T5A/7XoJBVV4XdxVjd4nQPGvJyF",
	"/SZ7WmEs1V5gLSbsdjiU2xuOfEl9B1HDq6b67I4/TniH9JOkdDNhKN7+BBYP5Nz23+lzvVsL8CGooXGM",
	"c2FSmc+ac/5SczkksCGyPominA83xlNyFB//BKaqRa+6CbQ6EU8bJ+FjROoUh7sXhoj/Uupl/S8AAP//",
	"24n7qksLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
