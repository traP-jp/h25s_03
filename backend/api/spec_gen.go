// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXU/rOBD9K9HsPnqbimWlVd5AoFW1SLBC+4SqyiRTapTYwXa4qqL89yvbSZM2JrSX",
	"fnDRfSLE4/HMmTkn45YQiywXHLlWEJWg4gVm1D5evyLX5oGm6e0coocSfpc4hwh+C9tNYb0jtOaXVCFU",
	"pIRcihylZmhdxRKpxmRGrb+5kJl5goRq/EOzDIGAXuYIESgtGX+CigAafzOWrO0oCpb4jJmaJZiiRmte",
	"Lz8KkSLlZr3Ikx0DqAhIfCmYNC4f2mjWzlpzTLppTlcOxeMzxhqqaUWgxWg3WO+LLKNy6UGWao08QfcP",
	"05jZhwRVLFmumeAQgZb0v2By5cOtfkGlpMtezq3vgWya0KJeZEnG+F7CIrZOvcL5Nq6dUHr7JMNZk5i/",
	"V5iaiRy5f1EznaLH9QZ0zow0cTYuewGQBqY+wjW+/+dN8h+n4TBLNlLoGPvLfyO0Rl/lT8721EW2rbu3",
	"avojskHgG+Mc5SH42EmLdAWpabathKkNsF9VcyDjc2GxcKDAxd0ECLyiVC748Wg8GptQTUPTnEEEf47G",
	"o3MgkFO9sOmGNjj7+IQWOtMe1KQ/SSCCf1BfOwuzSdIMtUXsYROpyTxgPE6LBAO9wKDOLsBmMzNGL4Xp",
	"QgKcZiZgNu+g0MKnZYGk/rx5u39qrFUuuHJdfDYe22YWXDffwTxPWWzTCJ+VU5jW4V7kfAcaVB5SVpsS",
	"CLf/mlr95XLZAJdrlJymwT3KV5TBtZRCOr/0yVSjngAM13OhPHW8E6otpIEalb4UyXIn3LYUs3UymGpW",
	"HyzYuwfDofCsSEORsLR/J1eV82f6to/zlX3vdvcYYzlgqNdSoPY52P/vddcbdDhIdw2KxKkz/gn6yUpv",
	"vPAQ1Lw+AYoHUoJ6FtpeC47E3dDNc5TH+D6NL1rbr8PlTlLDn4uvn723QdzoVn/k35K7m5XRsaAhWw5c",
	"aSeyzzRzrQbsIelo7in98Xq/atycM0yA4xf5A4q8PpzudPf13y72O8Gth7fTra/yhneQbhgWhLCs495q",
	"Bmy8HlEgPJ5XEX9yXe4yclh0vzSiexnAVip6QtX8VaW+6rlfc3b4kemYylcRUNbM9+POjYhpGrh1IFDI",
	"FCJYaJ2rKAxTs7gQSkdn4/O/wYBW+y+batR3KrJ60RnDOm9XjTutvgcAAP//rSzjre0YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
