// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY3U4bRxR+FWvai1baeq3+SNHeJQqqUKmgjXKFEJp4x3jR/jE7S4QsS+y6BBq5CgU1",
	"iKZSEhWRpigmNFygpJCHGdYxb1HN7I+99nqxi20UuPJ6d+bMme875ztnpgTyhmYaOtKJBaQSsPJFpEH+",
	"OLaIdMIeoKpOFoA0XQKfYlQAEvhEbE4SgxkiH34LWgiUhRIwsWEiTBTETeUxggTJs5DbKxhYY09AhgR9",
	"QRQNAQGQJRMBCVgEK/ocKAsAMXuzihybYduKnDRYsWZlpCKC+PDg8z3DUBHU2XfblPt0oCwAjBZsBTOT",
	"001vYmvFDAut25yJDBr35lGegPJMWQBNjKR2iKCsKTp/UgjS+IOMrDxWTKIYOpAAwfCHzPjtpN0HLyDG",
	"cIn9h4QgXUZoQObYDjtgS5oYW6GUyJKGZkPvkplSrFnDRHryR6IQFSWYbiPLHxb3Rwi9DhfocEcIOWgF",
	"sJPHgMVJ/a4ZAnMtmRwVS/2QcsfWNIiXhsvJwEDsV+FGkjstQnfBNEpiacIgBCURdOkVQvU969VcNzT/",
	"T6kRwH1F1xEeSHy20dmyLSGJ256KWdPBTk7ZgopeMDgWPijg5tQ4EMAiwpbvfC6by+aYqyxioKkACXyV",
	"zWW/BgIwISny7YrcOf44hzh0LDwg2/64DCTwLSJj/gg2CUMNEY7YdDtS1NmkTo1WfqWVl7TynFb+pe57",
	"6lQzBNsoQ52a9+zQW1+jy47388Oz7Z360Rp13rMp7g6tbNPKG1pZo67rre9R16HOrvfosXeyRZ0t6pxQ",
	"Z5uBxtZZsFkgC0CHGtuzUrgd4dgkgK0pBE1VUtyVZ9hoyzR0y8+DL3M5ng6GTsLuyzRVJc+BEOctX0qa",
	"BqNwObc1C7WxM2LapQpMfsdGfeO7Ev80rhOEdahm7iC8iHBmDGMD86izQu0FMSCd2unRcmP3BXU3OoEk",
	"cI5RGLSarEMyDSuB/CnD8tkPwEUWuWXIS30h1WPvGk8gxl/5ghTFha4P0SonJttAqao/fs35+Cke/Bun",
	"x3/U19bTqCoLYcqKJf47frvs+8CyoJNCPztCEtsymCcUk4JmPgU2U7PpPPy6JNdgEayuerXfOVJP20D0",
	"9SU93lO17rKBGlxuDSN0uwHv1Bov33w4fN2r4kCSLyZIDnt9CSwMSdyi40rvAjcqtuqVFe/ZAXU36k8O",
	"Qz3qQ3REv/OEeh6drz83m2OvhQg5NW/1rXf06sP2u7PqP9TdoO4rWvmTfXXf0cpeEtgtGKVX5GsH5l4b",
	"mI3nVVY6UwFMDFm/Kw86gm4lYCIaNCp0hYH10vWHx2fO0dXqosOz6/Ab6DSx9IHtqasOHU7P4nDUR1Dl",
	"4p10X9dMyQfXYTb6fV0ojKLVT5G1/RP+fjc6DoT5m3IQaEZXusSJpQCJng4Io45GIdFy5PFHVawi0rof",
	"PFolIb3uXGkKBtJXR/VgqKkaCX4Ph5rzBf9HQ1WvEr8X6VjWq6dHy61K6D1Yoc4L6tTOVn9p7Kx6x5t+",
	"OjX+OvAe7UeAZz4rQNVqNcbaHGbM5yo0sx8z4+yHZn6jbpVbekLdzc+7N0K2H5ij7oXiVcy/+O3jPnrE",
	"laypebWnvB3fYtRyyBvLK+xQefA2HJxawGwLYUvUUFpH/j0CAwXX57p0CRA2Vv/21h5QpxbwmCordy2E",
	"GUrMAjeZdO0+YeSjJYEAbKwCCRQJMSVRVNm3omER6UbuRg50Zu0UNmQ7z/4kWbAkUSQYLtjzSpZgaGat",
	"onEfsEAPPAyR9D1l5oP/wd1T80XL0azlbaTkM+X/AgAA//+Ay8CpECEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
