// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY4U/bRhT/V6LbPmySR6KukyZ/awWa0JDarR8RQtf4Aq5sn3u+MKHIEnbGYFWmMtCK",
	"WCe11RBdhRrKygfUDvrHHE7DfzHdne3EiWOSEcJKP8Xxnd+9+/3e+713VwFFbNrYQhZ1gFoBTnEemVA8",
	"Tiwgi/IHaBi3SkCdroBPCSoBFXySb32UD7/Ii+k3oYOAq1SATbCNCNWRMFUkCFKkzUJhr4SJyZ+ABin6",
	"guomAgqgizYCKnAo0a054CoAcXuzupb4olzWtbTJujOrIQNRJKaHw3cxNhC0+HjZ1gZ0wFUAQffLOuEm",
	"p1veJNZKGFbatzkTG8R376EiBe6Mq4AWRmonRFAzdUs86RSZ4kFDTpHoNtWxBVRACfwuNzmetvvwBSQE",
	"LvL/kFJkaQgNyRzfYRdsaR8mVqiksmSi2ci7dKZ0ZxbbyEofpDo1UIrpDrLktKQ/SuR1tECXO0rEQTuA",
	"3TyGLN4pmyYkixdL5NCQHzSZRkJTW06dk7E0lqYwpSiNoEsXI0N61q+5Xmj+F1VTwA+6ZSEylPjsoLNt",
	"W0oat33pZsvBbk75grpVwgILCQq4cXsSKGABEUc6XxgrjBW4qzxioK0DFXw5Vhi7DhRgQzovtpsXzonH",
	"OSSg4+EB+fYnNaCCbxCdkDP4RwSaiArEpjuRYt4G8+qs+iurvmDVZ6z6D/PfMa+Wo6SMcsyrB08PgrVV",
	"tuQFPz843dpuHK4y7x3/xN9m1S1Wfc2qq8z3g7Vd5nvM2wkePgqON5m3ybxj5m1x0Pg698s8kBVgQZPv",
	"WS+Nxzi2COBrKmH9Tos7d4bPdmxsOTIPrhUKIh2wRaNCb9uGXhRA5O85UkpaBuNwObMLiLSxO2I6pQrc",
	"+pbP+kq6khyatCgiFjRydxBZQCQ3QQgmIuqcSHtBAkivfnK41Nx5zvz1biApnOMUhl0NL8Y2dlLIv40d",
	"yX4ILnLoTawtDoRUn21SMoE4f+45KUoK3QCi5aYm21Cpajx6Jfj4MRn86ydHfzRW17KocpUoZfMV8Ts5",
	"7kofeBZ0UyizIyKxI4NFQnEpaOVTaDMzm87Cr0dyDRfB2kpQ/10g9aQDRKkv2fGeqXWXDdTwcusiQrcX",
	"8F69+eL1+4NX/SoOpMX5FMnhry+Bhf+HuI2KqUZ1OXi6z/z1xuODSIsGEJy87DqhVURna8+N1tyPQoC8",
	"erDyJjh8+X7r7Wntb+avM/8lq/7JR/23rLqbBnYbRtnV+KMDc7cDzOazGi+bmQCmhqzsyMNuoJf8T8WT",
	"RoWuMrQ+uvHg6NQ7vFoddHRuvfjmOUssJbB9ddSRw9lZHM36ACpcsose6M4p/dB6kU3+QJcJo2jzM2Rt",
	"71i834mPAlH+ZhwCWtGVLXH5SohEX4eDUUejkmo59viDKlYxab0PHe2SkF13rjQFQ+mp43pwoakaC34f",
	"B5qzBf97bBhXid/zdCxrtZPDpXYlDH5aZt5z5tVPV35pbq8ERxsynZp/7QcP92LAc5+VoOG0G+NtDjcm",
	"uYrM7CXMeHuRmd+YXxOWHjN/4/PejVBZBuaoe6FkFZOXvgPcRY+4krU0r/5EtOObnFoBeXNpmR8q999E",
	"k3sXMG5erJd2mTyFi9DIyXGggDIxgArmKbUdNZ83+OA8dqh6rXD9a8DRD+1XIirDyw8lftF2Pmh7G8vJ",
	"jPtvAAAA//9+XJrl/B0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
