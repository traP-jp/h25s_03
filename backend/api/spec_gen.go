// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWUWvjPBD8K2G/71EXm14PDr+1tBzhCu1R7qmEoNqbRsWWVGldCMb//VjZbuJU7TVc",
	"Q54ipNV4Z3bGcQO5qazRqMlD1oDPV1jJsLx8Rk28kGV5vYTsroH/HS4hg/+SzaWkv5GE8nPpEVrRgHXG",
	"oiOFASp3KAmLhQx4S+MqXkEhCb+QqhAE0NoiZODJKf0ArQBkvIUqRjfqWhWxYuUXBZZIyNX96b0xJUrN",
	"x7Ut9nx+K8DhU60cFpDdbZrZftQIV2yTnL/gmftHzAnaeStgo9B+ot7WVSXdOqKrLCqlw0oRVmFRoM+d",
	"sqSMhgzIyV+T2UVMsn5DOicZGiQR6gLxU+B25Ov73H7IOxINfLNduiz2qwHGmhl13UTtUuEidBU3jPIL",
	"Y/GNQ1JUYgR3h3RXJoYmB8jXxHvav+3A798D93nh+UgQYrPki0ovTcDsBIOzmxkIeEbnOzul03Sacgcs",
	"jLQKMvg6TaenIMBKWgUmSXhiWD5giC/zlDzaWQEZ/EC67Cr4kpMVEjofxOPhwlONbg0CtKy4he30dkJG",
	"Sc+ZtbdG+07PkzQN7zGjaXgpWluqPPSRPPrOZxvAl/zsEe7dCO36GK5/ctW3rpXx0UwTOi3LyS26Z3ST",
	"S+eMC8Mj+cBq9G9zzpg1PqLjjfEbIXni6OncFOu9aH/QrmNTkauxjet9AP6tGCyVNOF3dtF2eEMCxrpc",
	"hP3udtxhbNWNwXpM2GW4bbe/JPIt9x3EDe+G6tiMP894h8yTpHwVCRRvH0HFAyW3/3c6bnZbAT4UdTKO",
	"ca5MLstJd87fZq6EDFZE1mdJUvLhynjKTtLT78BS9ejNMIHeJ+Jl4yx8rEid4/bulSHiv5R23v4JAAD/",
	"/w62ui49CwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
