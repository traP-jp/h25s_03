// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY3U4bRxR+FWvai1baeq3+3PguEahCTUXaKFcIoYk9hkX7x+yYCFkrsesSaOQqFNQg",
	"mkpJVESaopjQcIGSQh5mWMe8RTUz++O114tdbKPAlce7M2fOfN853zmzFVAwNNPQkU4skK8AqzCHNMiH",
	"44tIJ2wAVXWyBPJTFfApRiWQB5/I0SLZXyHz6TehhYAtVYCJDRNhoiBuqoARJKg4A7m9koE1NgJFSNAX",
	"RNEQkABZMhHIA4tgRZ8FtgQQszejFGMrymWlmDRZsWaKSEUE8en+63uGoSKos/dls9inA7YEMFooK5iZ",
	"nIq8ie0VMyy1HnM6NGjcm0cFAuxpWwIRRvl2iGBRU3Q+UgjS+KCIrAJWTKIYOsgDguEPmYmxpNP7DyDG",
	"cIn9h4QgvYjQgMyxE3bAlrQwtkMlkSUNzQTeJTOlWDOGifTkl0QhKkow3UaWmBb3Rwq8DjbocEcKOGgF",
	"sJNHn8VJ/a4ZAHMtmRwVS/2QcqesaRAvDZeTgYHYr8KNJHdahO6CaZTE0i2DEJRE0KVXCFV41qu5bmj+",
	"n1IjgfuKriM8kPhso7PlWFIStz0Vs8jBTk7ZhopeMjgWAhRw4/YEkMAiwpZwPpfNZXPMVRYx0FRAHnyV",
	"zWW/BhIwIZnjx5W5c3w4izh0LDwgO/5EEeTBt4iMixlsEYYaIhyxqXakqLNJnTqt/kqrL2n1Oa3+S933",
	"1KllCC6jDHXq3rNDb32NLjvezw/PtncaR2vUec+WuDu0uk2rb2h1jbqut75HXYc6u96jx97JFnW2qHNC",
	"nW0GGttnocwCWQI61NiZldJYiGNEANtT8puqpLizp9lsyzR0S+TBl7kcTwdDJ0H3ZZqqUuBAyPOWkJLI",
	"YBgu57ZmgTZ2Rky7VIHJ79isb4Qr8VcTOkFYh2rmDsKLCGfGMTYwjzor0F4QA9Kpnx4tN3dfUHejE0gC",
	"ZxmFfqvJOiTTsBLIv21Ygn0fXGSRm0ZxqS+keuxd4wnE+LMvSFFc6PoQLTsx2QZKVePxa87HT/Hg3zg9",
	"/qOxtp5GlS0FKStX+O/EmC18YFnQSaHIjoDEtgzmCcWkIMon32ZqNp2HX5fkGiyCtVWv/jtH6mkbiEJf",
	"0uM9VesuG6jB5dYwQrcb8E69+fLNh8PXvSoOJIW5BMlhjy+BhSGJW3hd6V3gRsVWo7riPTug7kbjyWGg",
	"R32Ijiw6T6gX0Pn6cyOaey1EyKl7q2+9o1cftt+d1f6h7gZ1X9Hqn+yt+45W95LAbsEovSJfOzD32sBs",
	"Pq+x0pkKYGLIiq7c7wi6lYBb4aRRoSsNrJduPDw+c46uVhcd3F2H30CniaUAtqeuOnA4PYuDWR9BlYt3",
	"0n19Zkq+uA6z0e/rg8IoWv0UWds/4c93w+tAkL8pF4EoutIlTq74SPR0QRh1NEqJlkOPP6piFZLW/eLR",
	"KgnpdedKUzCQvjqsB0NN1VDwe7jUnC/4PxqqepX4vUjHsl47PVpuVULvwQp1XlCnfrb6S3Nn1TveFOnU",
	"/OvAe7QfAp75rARVq9UYa3OYMcFVYGY/ZsbZD8z8Rt0at/SEupufd2+EyiIwR90LxauY+PDbx/foEVey",
	"SPPqT3k7vsWo5ZA3l1fYpfLgbTA5tYCVLYQtWUNpHfn3CAwUXMF15RIgbK7+7a09oE7d5zFVVu5aCDOU",
	"mAVuUshFGasgD+YIMa28LBMMF8rzSpZgaGatOeO+DE0FsGj0zQTHFeZY5vr//Q9E0YOW+1PL01Bup+3/",
	"AgAA//+8GNQ+tSAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
